

import pandas as pd



file_path ="/content/Spam_Detection(2).csv"
df= pd.read_csv(file_path)

df.head()


pip install emoji

import re
import nltk
from bs4 import BeautifulSoup
from nltk.corpus import stopwords
from nltk.stem import WordNetLemmatizer
import emoji

nltk.download('stopwords')
nltk.download('wordnet')
nltk.download('punkt')

print(df.head())

stop_words = set(stopwords.words('english'))
lemmatizer = WordNetLemmatizer()

def preprocess_text(text):
    text = text.lower()

    text = BeautifulSoup(text, "html.parser").get_text()

    text = re.sub(r'http\S+|www\S+|https\S+', '', text, flags=re.MULTILINE)

    text = re.sub(r'\@w+|\#','', text)
    text = re.sub(r'[^\w\s]', '', text)

    text = emoji.demojize(text)
    text = re.sub(r':[^:]*:', '', text)

    tokens = nltk.word_tokenize(text)

    tokens = [word for word in tokens if word not in stop_words]

    tokens = [word for word in tokens if not any(c.isdigit() for c in word)]

    tokens = [lemmatizer.lemmatize(word) for word in tokens]

    text = ' '.join(tokens)

    return text

df['Mail'] = df['Mail'].apply(preprocess_text)

print(df.head())

from nltk.stem import WordNetLemmatizer
from nltk.tokenize import word_tokenize
from collections import Counter
import matplotlib.pyplot as plt

spam_emails = df[df['Label'] == 'spam']['Mail']
ham_emails = df[df['Label'] == 'ham']['Mail']

spam_words = ' '.join(spam_emails).split()
ham_words = ' '.join(ham_emails).split()

spam_word_freq = Counter(spam_words)
ham_word_freq = Counter(ham_words)

spam_common_words = spam_word_freq.most_common(20)
ham_common_words = ham_word_freq.most_common(20)

spam_common_df = pd.DataFrame(spam_common_words, columns=['Word', 'Frequency'])
ham_common_df = pd.DataFrame(ham_common_words, columns=['Word', 'Frequency'])

plt.figure(figsize=(10, 8))

plt.subplot(2, 1, 1)
plt.barh(spam_common_df['Word'], spam_common_df['Frequency'], color='red')
plt.title('Top 20 Words in Spam Emails')
plt.xlabel('Frequency')
plt.ylabel('Words')

plt.subplot(2, 1, 2)
plt.barh(ham_common_df['Word'], ham_common_df['Frequency'], color='green')
plt.title('Top 20 Words in Ham Emails')
plt.xlabel('Frequency')
plt.ylabel('Words')

plt.tight_layout()
plt.show()

df['processed_text'] = df['Mail'].apply(preprocess_text)

spam_emails = df[df['Label'] == 'spam']['processed_text']
non_spam_emails = df[df['Label'] == 'ham']['processed_text']

spam_words = ' '.join(spam_emails).split()
non_spam_words = ' '.join(non_spam_emails).split()

spam_word_freq = Counter(spam_words)
non_spam_word_freq = Counter(non_spam_words)

common_spam_words = spam_word_freq.most_common(10)
common_non_spam_words = non_spam_word_freq.most_common(10)

print("Common words in spam emails:")
print(common_spam_words)

print("\nCommon words in non-spam emails:")
print(common_non_spam_words)

spam_potential_words = [word for word, count in common_spam_words if spam_word_freq[word] > 2 * non_spam_word_freq.get(word, 0)]

print("\nWords with potential to indicate spam:")
print(spam_potential_words)



print(df['Label'].value_counts())



from sklearn.utils import resample
spam = df[df['Label'] == 'spam']
ham = df[df['Label'] == 'ham']

ham_downsampled = resample(ham, replace=False, n_samples=len(spam), random_state=42)

df_balanced = pd.concat([spam, ham_downsampled])

print(df_balanced['Label'].value_counts())



df_balanced = pd.concat([spam, ham_downsampled])
print(df_balanced['Label'].value_counts())



from sklearn.utils import resample

spam_upsampled = resample(spam, replace=True, n_samples=len(ham), random_state=42)

df_balanced = pd.concat([spam_upsampled, ham])

print(df_balanced['Label'].value_counts())



spam = df[df['Label'] == 'spam']
ham = df[df['Label'] == 'ham']

ham_downsampled = resample(ham, replace=False, n_samples=len(spam), random_state=42)

df_balanced = pd.concat([spam, ham_downsampled])

print(df_balanced['Label'].value_counts())

from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report
import matplotlib.pyplot as plt
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Embedding, SimpleRNN, LSTM, GRU, Dense
from tensorflow.keras.optimizers import Adam, RMSprop, SGD
import emoji

nltk.download('stopwords')
nltk.download('wordnet')
nltk.download('punkt')

stop_words = set(stopwords.words('english'))
lemmatizer = WordNetLemmatizer()

def preprocess_text(text):
    text = text.lower()

    text = BeautifulSoup(text, "html.parser").get_text()

    text = re.sub(r'http\S+|www\S+|https\S+', '', text, flags=re.MULTILINE)

    text = re.sub(r'\@w+|\#','', text)
    text = re.sub(r'[^\w\s]', '', text)

    text = emoji.demojize(text)
    text = re.sub(r':[^:]*:', '', text)

    tokens = nltk.word_tokenize(text)

    tokens = [word for word in tokens if word not in stop_words]

    tokens = [word for word in tokens if not any(c.isdigit() for c in word)]

    tokens = [lemmatizer.lemmatize(word) for word in tokens]

    text = ' '.join(tokens)

    return text

df_balanced['Mail'] = df_balanced['Mail'].apply(preprocess_text)

df_balanced['Label'] = df_balanced['Label'].map({'ham': 0, 'spam': 1})

X = df_balanced['Mail'].values
y = df_balanced['Label'].values

X_train, X_temp, y_train, y_temp = train_test_split(X, y, test_size=0.2, random_state=42, shuffle=True)
X_val, X_test, y_val, y_test = train_test_split(X_temp, y_temp, test_size=0.5, random_state=42, shuffle=True)

tokenizer = Tokenizer(num_words=5000)
tokenizer.fit_on_texts(X_train)
X_train_seq = tokenizer.texts_to_sequences(X_train)
X_val_seq = tokenizer.texts_to_sequences(X_val)
X_test_seq = tokenizer.texts_to_sequences(X_test)

maxlen = 100
X_train_pad = pad_sequences(X_train_seq, maxlen=maxlen)
X_val_pad = pad_sequences(X_val_seq, maxlen=maxlen)
X_test_pad = pad_sequences(X_test_seq, maxlen=maxlen)

def build_rnn_model(input_dim, output_dim, input_length):
    model = Sequential()
    model.add(Embedding(input_dim=input_dim, output_dim=output_dim, input_length=input_length))
    model.add(SimpleRNN(128))
    model.add(Dense(1, activation='sigmoid'))
    model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
    return model

def build_lstm_model(input_dim, output_dim, input_length):
    model = Sequential()
    model.add(Embedding(input_dim=input_dim, output_dim=output_dim, input_length=input_length))
    model.add(LSTM(128))
    model.add(Dense(1, activation='sigmoid'))
    model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
    return model

def build_gru_model(input_dim, output_dim, input_length):
    model = Sequential()
    model.add(Embedding(input_dim=input_dim, output_dim=output_dim, input_length=input_length))
    model.add(GRU(128))
    model.add(Dense(1, activation='sigmoid'))
    model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
    return model

input_dim = 5000
output_dim = 128
input_length = maxlen

rnn_model = build_rnn_model(input_dim, output_dim, input_length)
lstm_model = build_lstm_model(input_dim, output_dim, input_length)
gru_model = build_gru_model(input_dim, output_dim, input_length)

def train_and_evaluate_model(model, X_train, y_train, X_val, y_val, X_test, y_test, model_name):
    history = model.fit(X_train, y_train, epochs=10, batch_size=32, validation_data=(X_val, y_val), verbose=0)

    y_pred = (model.predict(X_test) > 0.5).astype("int32")
    report = classification_report(y_test, y_pred, output_dict=True)

    print(f'\n{model_name} Model Evaluation:')
    print(classification_report(y_test, y_pred))

    return history

history_rnn = train_and_evaluate_model(rnn_model, X_train_pad, y_train, X_val_pad, y_val, X_test_pad, y_test, 'RNN')
history_lstm = train_and_evaluate_model(lstm_model, X_train_pad, y_train, X_val_pad, y_val, X_test_pad, y_test, 'LSTM')
history_gru = train_and_evaluate_model(gru_model, X_train_pad, y_train, X_val_pad, y_val, X_test_pad, y_test, 'GRU')

def plot_history(histories, titles):
    for i, history in enumerate(histories):
        plt.figure(figsize=(12, 6))

        plt.subplot(1, 2, 1)
        plt.plot(history.history['accuracy'], label='Train Accuracy')
        plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
        plt.plot(np.arange(len(history.history['accuracy'])), [model.evaluate(X_test_pad, y_test, verbose=0)[1]] * len(history.history['accuracy']), '--', label='Test Accuracy', color='blue')
        plt.title(f'{titles[i]} Accuracy')
        plt.xlabel('Epochs')
        plt.ylabel('Accuracy')
        plt.legend()

        plt.subplot(1, 2, 2)
        plt.plot(history.history['loss'], label='Train Loss')
        plt.plot(history.history['val_loss'], label='Validation Loss')
        plt.plot(np.arange(len(history.history['loss'])), [model.evaluate(X_test_pad, y_test, verbose=0)[0]] * len(history.history['loss']), '--', label='Test Loss', color='blue')
        plt.title(f'{titles[i]} Loss')
        plt.xlabel('Epochs')
        plt.ylabel('Loss')
        plt.legend()

        plt.show()

plot_history([history_rnn, history_lstm, history_gru], ['RNN', 'LSTM', 'GRU'])


X = df_balanced['Mail'].values
y = df_balanced['Label'].values

X_train, X_temp, y_train, y_temp = train_test_split(X, y, test_size=0.2, random_state=42, shuffle=True)
X_val, X_test, y_val, y_test = train_test_split(X_temp, y_temp, test_size=0.5, random_state=42, shuffle=True)

tokenizer = Tokenizer(num_words=5000)
tokenizer.fit_on_texts(X_train)
X_train_seq = tokenizer.texts_to_sequences(X_train)
X_val_seq = tokenizer.texts_to_sequences(X_val)
X_test_seq = tokenizer.texts_to_sequences(X_test)

maxlen = 100
X_train_pad = pad_sequences(X_train_seq, maxlen=maxlen)
X_val_pad = pad_sequences(X_val_seq, maxlen=maxlen)
X_test_pad = pad_sequences(X_test_seq, maxlen=maxlen)

def build_model_with_optimizer(input_dim, output_dim, input_length, optimizer):
    model = Sequential()
    model.add(Embedding(input_dim=input_dim, output_dim=output_dim, input_length=input_length))
    model.add(LSTM(128))
    model.add(Dense(1, activation='sigmoid'))
    model.compile(optimizer=optimizer, loss='binary_crossentropy', metrics=['accuracy'])
    return model

optimizers = {
    'Adam': Adam,
    'RMSprop': RMSprop,
    'SGD': SGD
}

learning_rates = [0.1, 0.01, 0.001]

input_dim = 5000
output_dim = 128
input_length = maxlen

results = {}

for opt_name, opt_class in optimizers.items():
    for lr in learning_rates:
        print(f"\nTraining with {opt_name} optimizer and learning rate {lr}...")
        optimizer = opt_class(learning_rate=lr)
        model = build_model_with_optimizer(input_dim, output_dim, input_length, optimizer)
        history = model.fit(X_train_pad, y_train, epochs=10, batch_size=32, validation_data=(X_val_pad, y_val), verbose=0)

        y_pred = (model.predict(X_test_pad) > 0.5).astype("int32")
        report = classification_report(y_test, y_pred, output_dict=True)

        key = f"{opt_name}_lr_{lr}"
        results[key] = {
            'history': history,
            'report': report
        }

best_optimizer = None
best_lr = None
best_accuracy = 0

for key, result in results.items():
    accuracy = result['report']['accuracy']
    if accuracy > best_accuracy:
        best_accuracy = accuracy
        best_optimizer, best_lr = key.split('_lr_')
        best_lr = float(best_lr)

print(f"\nBest optimizer: {best_optimizer} with learning rate: {best_lr} achieving accuracy: {best_accuracy}")

def build_rnn_model(input_dim, output_dim, input_length, optimizer=best_optimizer, learning_rate=best_lr):
    model = Sequential()
    model.add(Embedding(input_dim=input_dim, output_dim=output_dim, input_length=input_length))
    model.add(SimpleRNN(128))
    model.add(Dense(1, activation='sigmoid'))
    opt = optimizers[optimizer](learning_rate=learning_rate)
    model.compile(optimizer=opt, loss='binary_crossentropy', metrics=['accuracy'])
    return model

def build_lstm_model(input_dim, output_dim, input_length, optimizer=best_optimizer, learning_rate=best_lr):
    model = Sequential()
    model.add(Embedding(input_dim=input_dim, output_dim=output_dim, input_length=input_length))
    model.add(LSTM(128))
    model.add(Dense(1, activation='sigmoid'))
    opt = optimizers[optimizer](learning_rate=learning_rate)
    model.compile(optimizer=opt, loss='binary_crossentropy', metrics=['accuracy'])
    return model

def build_gru_model(input_dim, output_dim, input_length, optimizer=best_optimizer, learning_rate=best_lr):
    model = Sequential()
    model.add(Embedding(input_dim=input_dim, output_dim=output_dim, input_length=input_length))
    model.add(GRU(128))
    model.add(Dense(1, activation='sigmoid'))
    opt = optimizers[optimizer](learning_rate=learning_rate)
    model.compile(optimizer=opt, loss='binary_crossentropy', metrics=['accuracy'])
    return model

def train_and_evaluate_model(model, X_train, y_train, X_val, y_val, X_test, y_test, model_name):
    history = model.fit(X_train, y_train, epochs=10, batch_size=32, validation_data=(X_val, y_val), verbose=0)

    y_pred = (model.predict(X_test) > 0.5).astype("int32")
    report = classification_report(y_test, y_pred, output_dict=True)

    print(f'\n{model_name} Model Evaluation:')
    print(classification_report(y_test, y_pred))

    return history

rnn_model = build_rnn_model(input_dim, output_dim, input_length)
lstm_model = build_lstm_model(input_dim, output_dim, input_length)
gru_model = build_gru_model(input_dim, output_dim, input_length)

history_rnn = train_and_evaluate_model(rnn_model, X_train_pad, y_train, X_val_pad, y_val, X_test_pad, y_test, 'RNN')
history_lstm = train_and_evaluate_model(lstm_model, X_train_pad, y_train, X_val_pad, y_val, X_test_pad, y_test, 'LSTM')
history_gru = train_and_evaluate_model(gru_model, X_train_pad, y_train, X_val_pad, y_val, X_test_pad, y_test, 'GRU')

def plot_history(histories, titles):
    for i, history in enumerate(histories):
        plt.figure(figsize=(12, 6))

        plt.subplot(1, 2, 1)
        plt.plot(history.history['accuracy'], label='Train Accuracy')
        plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
        plt.plot(np.arange(len(history.history['accuracy'])), [model.evaluate(X_test_pad, y_test, verbose=0)[1]] * len(history.history['accuracy']), linestyle='--', label='Test Accuracy')
        plt.title(f'{titles[i]} - Accuracy')
        plt.xlabel('Epochs')
        plt.ylabel('Accuracy')
        plt.legend()

        plt.subplot(1, 2, 2)
        plt.plot(history.history['loss'], label='Train Loss')
        plt.plot(history.history['val_loss'], label='Validation Loss')
        plt.plot(np.arange(len(history.history['loss'])), [model.evaluate(X_test_pad, y_test, verbose=0)[0]] * len(history.history['loss']), linestyle='--', label='Test Loss')
        plt.title(f'{titles[i]} - Loss')
        plt.xlabel('Epochs')
        plt.ylabel('Loss')
        plt.legend()

        plt.show()

plot_history([history_rnn, history_lstm, history_gru], ['RNN', 'LSTM', 'GRU'])


